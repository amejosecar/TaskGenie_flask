Elimina la base de datos que tengas en instance/taskgenie.db, listo

Asegúrate de que tu carpeta migrations/versions/ está vacía (ya lo comprobaste)., listo

Crea manualmente la primera revisión en lugar de “migrate”:
(venv) PS C:\americo\API\TaskGenie_flask> flask db revision --autogenerate -m "Initial schema: usuarios, tareas, importancia, estado, calificada"
>> 
INFO  [alembic.runtime.migration] Context impl SQLiteImpl.
INFO  [alembic.runtime.migration] Will assume non-transactional DDL.
C:\americo\API\TaskGenie_flask\migrations\env.py:107: SAWarning: Cannot correctly sort tables; there are unresolvable cycles between tables "tareas, tb_tarea_calificada", which is usually caused by mutually dependent foreign key constraints.  Foreign key constraints involving these tables will not be considered; this warning may raise an error in a future release.
  context.run_migrations()
INFO  [alembic.autogenerate.compare] Detected added table 'tareas'
INFO  [alembic.autogenerate.compare] Detected added table 'tb_estado_tarea'
INFO  [alembic.autogenerate.compare] Detected added table 'tb_importancia'
INFO  [alembic.autogenerate.compare] Detected added table 'tb_tarea_calificada'
INFO  [alembic.autogenerate.compare] Detected added table 'usuarios'
Generating C:\americo\API\TaskGenie_flask\migrations\versions\06009f2cb2b5_initial_schema_usuarios_tareas_.py ...  done
(venv) PS C:\americo\API\TaskGenie_flask> 

file 06009f2cb2b5_initial_schema_usuarios_tareas_.py

Revisa que esa migración incluya, en sus primeros 20–30 renglones:
codigo creado 
"""Initial schema: usuarios, tareas, importancia, estado, calificada

Revision ID: 06009f2cb2b5
Revises: 
Create Date: 2025-06-18 12:36:19.397531

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '06009f2cb2b5'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tareas',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('titulo', sa.String(length=100), nullable=False),
    sa.Column('descripcion', sa.Text(), nullable=True),
    sa.Column('completada', sa.Boolean(), nullable=True),
    sa.Column('fecha_creacion', sa.Date(), nullable=True),
    sa.Column('fecha_entrega', sa.Date(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('importancia_id', sa.String(length=2), nullable=True),
    sa.Column('estado_id', sa.String(length=2), nullable=True),
    sa.Column('asignado_a_id', sa.Integer(), nullable=True),
    sa.Column('calificacion_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['asignado_a_id'], ['usuarios.id'], name=op.f('fk_tareas_asignado_a_id_usuarios')),
    sa.ForeignKeyConstraint(['calificacion_id'], ['tb_tarea_calificada.cod_id_califica'], name=op.f('fk_tareas_calificacion_id_tb_tarea_calificada')),
    sa.ForeignKeyConstraint(['estado_id'], ['tb_estado_tarea.cod_id'], name=op.f('fk_tareas_estado_id_tb_estado_tarea')),
    sa.ForeignKeyConstraint(['importancia_id'], ['tb_importancia.cod_id'], name=op.f('fk_tareas_importancia_id_tb_importancia')),
    sa.ForeignKeyConstraint(['user_id'], ['usuarios.id'], name=op.f('fk_tareas_user_id_usuarios')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_tareas'))
    )
    op.create_table('tb_estado_tarea',
    sa.Column('cod_id', sa.String(length=2), nullable=False),
    sa.Column('desc_estado_tarea', sa.String(length=50), nullable=False),
    sa.PrimaryKeyConstraint('cod_id', name=op.f('pk_tb_estado_tarea'))
    )
    op.create_table('tb_importancia',
    sa.Column('cod_id', sa.String(length=2), nullable=False),
    sa.Column('tipo_importancia', sa.String(length=20), nullable=False),
    sa.Column('desc_importancia', sa.String(length=100), nullable=False),
    sa.PrimaryKeyConstraint('cod_id', name=op.f('pk_tb_importancia'))
    )
    op.create_table('tb_tarea_calificada',
    sa.Column('cod_id_califica', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('cod_id_tarea', sa.Integer(), nullable=False),
    sa.Column('fecha_calificado', sa.Date(), nullable=True),
    sa.Column('texto_calificado', sa.Text(), nullable=True),
    sa.Column('puntuacion_calificado', sa.Integer(), nullable=True),
    sa.Column('estatus_calificado', sa.String(length=2), nullable=False),
    sa.ForeignKeyConstraint(['cod_id_tarea'], ['tareas.id'], name=op.f('fk_tb_tarea_calificada_cod_id_tarea_tareas')),
    sa.PrimaryKeyConstraint('cod_id_califica', name=op.f('pk_tb_tarea_calificada'))
    )
    op.create_table('usuarios',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('nombre', sa.String(length=50), nullable=False),
    sa.Column('apellido', sa.String(length=50), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('clave_hash', sa.String(length=128), nullable=False),
    sa.Column('fecha_nacimiento', sa.Date(), nullable=False),
    sa.Column('rol', sa.Enum('ADMIN', 'PROFESOR', 'ALUMNO', 'USER', name='rolenum'), nullable=False),
    sa.Column('is_blocked', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_usuarios')),
    sa.UniqueConstraint('email', name=op.f('uq_usuarios_email'))
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('usuarios')
    op.drop_table('tb_tarea_calificada')
    op.drop_table('tb_importancia')
    op.drop_table('tb_estado_tarea')
    op.drop_table('tareas')
    # ### end Alembic commands ###


Aplica esa única migración:

bash
flask db upgrade

(venv) PS C:\americo\API\TaskGenie_flask> flask db upgrade
>>
INFO  [alembic.runtime.migration] Context impl SQLiteImpl.
INFO  [alembic.runtime.migration] Will assume non-transactional DDL.
INFO  [alembic.runtime.migration] Running upgrade  -> 06009f2cb2b5, Initial schema: usuarios, tareas, importancia, estado, calificada
Traceback (most recent call last):
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1963, in _exec_single_context
    self.dialect.do_execute(
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\sqlalchemy\engine\default.py", line 943, in do_execute
    cursor.execute(statement, parameters)
sqlite3.OperationalError: table tareas already exists

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "C:\americo\API\TaskGenie_flask\venv\Scripts\flask.exe\__main__.py", line 7, in <module>
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\flask\cli.py", line 1131, in main
    cli.main()
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\click\core.py", line 1363, in main
    rv = self.invoke(ctx)
         ^^^^^^^^^^^^^^^^
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\click\core.py", line 1830, in invoke
    return _process_result(sub_ctx.command.invoke(sub_ctx))
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\click\core.py", line 1830, in invoke
    return _process_result(sub_ctx.command.invoke(sub_ctx))
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\click\core.py", line 1226, in invoke
    return ctx.invoke(self.callback, **ctx.params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\click\core.py", line 794, in invoke
    return callback(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\click\decorators.py", line 34, in new_func
    return f(get_current_context(), *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\flask\cli.py", line 400, in decorator
    return ctx.invoke(f, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\click\core.py", line 794, in invoke
    return callback(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\flask_migrate\cli.py", line 157, in upgrade
    _upgrade(directory or g.directory, revision, sql, tag, x_arg or g.x_arg)
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\flask_migrate\__init__.py", line 111, in wrapped
    f(*args, **kwargs)
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\flask_migrate\__init__.py", line 200, in upgrade
    command.upgrade(config, revision, sql=sql, tag=tag)
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\alembic\command.py", line 483, in upgrade
    script.run_env()
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\alembic\script\base.py", line 551, in run_env
    util.load_python_file(self.dir, "env.py")
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\alembic\util\pyfiles.py", line 116, in load_python_file
    module = load_module_py(module_id, path)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\alembic\util\pyfiles.py", line 136, in load_module_py
    spec.loader.exec_module(module)  # type: ignore
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "<frozen importlib._bootstrap_external>", line 999, in exec_module
  File "<frozen importlib._bootstrap>", line 488, in _call_with_frames_removed
  File "C:\americo\API\TaskGenie_flask\migrations\env.py", line 113, in <module>
    run_migrations_online()
  File "C:\americo\API\TaskGenie_flask\migrations\env.py", line 107, in run_migrations_online
    context.run_migrations()
  File "<string>", line 8, in run_migrations
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\alembic\runtime\environment.py", line 946, in run_migrations
    self.get_context().run_migrations(**kw)
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\alembic\runtime\migration.py", line 627, in run_migrations
    step.migration_fn(**kw)
  File "C:\americo\API\TaskGenie_flask\migrations\versions\06009f2cb2b5_initial_schema_usuarios_tareas_.py", line 21, in upgrade
    op.create_table('tareas',
  File "<string>", line 8, in create_table
  File "<string>", line 3, in create_table
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\alembic\operations\ops.py", line 1332, in create_table
    return operations.invoke(op)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\alembic\operations\base.py", line 441, in invoke
    return fn(self, operation)
           ^^^^^^^^^^^^^^^^^^^
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\alembic\operations\toimpl.py", line 135, in create_table
    operations.impl.create_table(table, **kw)
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\alembic\ddl\impl.py", line 423, in create_table
    self._exec(schema.CreateTable(table, **kw))
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\alembic\ddl\impl.py", line 246, in _exec
    return conn.execute(construct, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1415, in execute
    return meth(
           ^^^^^
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\sqlalchemy\sql\ddl.py", line 187, in _execute_on_connection
    return connection._execute_ddl(
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1526, in _execute_ddl
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1842, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1982, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2351, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1963, in _exec_single_context
    self.dialect.do_execute(
  File "C:\americo\API\TaskGenie_flask\venv\Lib\site-packages\sqlalchemy\engine\default.py", line 943, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) table tareas already exists
[SQL:
CREATE TABLE tareas (
        id INTEGER NOT NULL,
        titulo VARCHAR(100) NOT NULL,
        descripcion TEXT,
        completada BOOLEAN,
        fecha_creacion DATE,
        fecha_entrega DATE,
        user_id INTEGER NOT NULL,
        importancia_id VARCHAR(2),
        estado_id VARCHAR(2),
        asignado_a_id INTEGER,
        calificacion_id INTEGER,
        CONSTRAINT pk_tareas PRIMARY KEY (id),
        CONSTRAINT fk_tareas_asignado_a_id_usuarios FOREIGN KEY(asignado_a_id) REFERENCES usuarios (id),
        CONSTRAINT fk_tareas_calificacion_id_tb_tarea_calificada FOREIGN KEY(calificacion_id) REFERENCES tb_tarea_calificada (cod_id_califica),
        CONSTRAINT fk_tareas_estado_id_tb_estado_tarea FOREIGN KEY(estado_id) REFERENCES tb_estado_tarea (cod_id),
        CONSTRAINT fk_tareas_importancia_id_tb_importancia FOREIGN KEY(importancia_id) REFERENCES tb_importancia (cod_id),
        CONSTRAINT fk_tareas_user_id_usuarios FOREIGN KEY(user_id) REFERENCES usuarios (id)
)

]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
(venv) PS C:\americo\API\TaskGenie_flask> 


Por último, vuelve a listar migrations/versions/ y comprueba que sólo exista ese script inicial.

C:\americo\API\TaskGenie_flask\migrations\versions\06009f2cb2b5_initial_schema_usuarios_tareas_.py

